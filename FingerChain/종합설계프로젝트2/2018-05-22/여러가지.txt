
uint8_t : 8비트(1바이트)

Serial.available() : 버퍼에 저장 되어 있는 바이트 수를 반환 (버퍼 사이즈는 64바이트)
Serial.parseInt() : 가능
Serial.read() : 버퍼의 첫번째 문자를 10진 ASCII코드 값으로 반환 (비어 있으면 -1)
Serial.write() : 시리얼 포트로 1바이트 송신



#define FINGERPRINT_PACKETRESPONSEFAIL 0x0E

#define FINGERPRINT_GETIMAGE 0x01
#define FINGERPRINT_IMAGE2TZ 0x02



SEND_CMD_PACKET(...) GET_CMD_PACKET(__VA_ARGS__); return packet.data[0];



GET_CMD_PACKET(...)
  uint8_t data[] = {__VA_ARGS__}; \
	
  Adafruit_Fingerprint_Packet packet(FINGERPRINT_COMMANDPACKET, sizeof(data), data); \
  writeStructuredPacket(packet); \
  if (getStructuredPacket(&packet) != FINGERPRINT_OK) return FINGERPRINT_PACKETRECIEVEERR; \
  if (packet.type != FINGERPRINT_ACKPACKET) return FINGERPRINT_PACKETRECIEVEERR;



void Adafruit_Fingerprint::writeStructuredPacket(const Adafruit_Fingerprint_Packet & packet) {
  SERIAL_WRITE_U16(packet.start_code);
  SERIAL_WRITE(packet.address[0]);
  SERIAL_WRITE(packet.address[1]);
  SERIAL_WRITE(packet.address[2]);
  SERIAL_WRITE(packet.address[3]);
  SERIAL_WRITE(packet.type);

  uint16_t wire_length = packet.length + 2;
  SERIAL_WRITE_U16(wire_length);

  uint16_t sum = ((wire_length)>>8) + ((wire_length)&0xFF) + packet.type;

  // 패킷 사이즈만큼 시리얼로 보냄
  for (uint8_t i=0; i< packet.length; i++) {
    SERIAL_WRITE(packet.data[i]);
    sum += packet.data[i];
  }

  SERIAL_WRITE_U16(sum);
  return;
}


